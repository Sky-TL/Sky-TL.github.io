<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Eureka简介与Eureka Server</title>
      <link href="/2019/01/15/eureka/"/>
      <url>/2019/01/15/eureka/</url>
      
        <content type="html"><![CDATA[<p>Eureka简介<br><a id="more"></a></p><h1 id="Eureka简介与Eureka-Server"><a href="#Eureka简介与Eureka-Server" class="headerlink" title="Eureka简介与Eureka Server"></a>Eureka简介与Eureka Server</h1><h2 id="为什么使用Eureka"><a href="#为什么使用Eureka" class="headerlink" title="为什么使用Eureka"></a>为什么使用Eureka</h2><p>​    1.Eureka来自生产环境 </p><p>​    2.Spring Cloud对Eureka支持很好 </p><h2 id="什么是Eureka"><a href="#什么是Eureka" class="headerlink" title="什么是Eureka"></a>什么是Eureka</h2><p>​    Eureka是Netflix开发的服务发现框架，本身是一个基于REST的服务，主要用于定位运行在AWS域中的中间层服务，以达到 </p><p>​    负载均衡和中间层服务故障转移的目的。Spring Cloud将它集成在其子项目spring-cloud-netflix中，以实现Spring Cloud的 </p><p>​    服务发现功能。 </p><p>​     Eureka 项目相当活跃，代码更新相当频繁，目前最新的版本是1.5.5。 </p><p>​    Eureka 2.0的版本也正在紧锣密鼓地开发中，2.0将会带来更好的扩展性，并且使用细粒度的订阅模型取代了 </p><p>​    基于拉取的模型，但是由于还没有Release，故而不作讲解。 </p><h2 id="Eureka原理"><a href="#Eureka原理" class="headerlink" title="Eureka原理"></a>Eureka原理</h2><h3 id="Region和Zone的关系"><a href="#Region和Zone的关系" class="headerlink" title="Region和Zone的关系"></a>Region和Zone的关系</h3><p><img src="/Users/tanlin/Desktop/5DDEED76-981F-4A12-9F8B-A9537193DC6E.png" alt=""></p><p> 上图是来自Eureka官方的架构图，大致描述了Eureka集群的工作过程。由于图比较复杂，可能比较难看懂，这边用通俗易懂的语言翻译一下： </p><ol><li><p>Application Service 就相当于本书中的服务提供者（用户微服务），Application Client就相当于本书中的服务消费者（电影微服务）； </p></li><li><p>- Make Remote Call，可以简单理解为调用RESTful的接口； </p></li><li><p>- us-east-1c、us-east-1d等是zone，它们都属于us-east-1这个region； </p></li><li><p>由图可知，Eureka包含两个组件：Eureka Server 和 Eureka Client。 </p></li><li><p>Eureka Server提供服务注册服务，各个节点启动后，会在Eureka Server中进行注册，这样Eureka Server中 的服务注册表中将会存储所有可用服务节点的信息，服务节点的信息可以在界面中直观的看到。 </p></li><li><p>Eureka Client是一个Java客户端，用于简化与Eureka Server的交互，客户端同时也具备一个内置的、使用轮询（round-robin）负载算法的负载均衡器。 </p></li><li><p>在应用启动后，将会向Eureka Server发送心跳（默认周期为30秒）。如果Eureka Server在多个心跳周期内 </p><p>没有接收到某个节点的心跳，Eureka Server将会从服务注册表中把这个服务节点移除（默认90秒）。 </p></li><li><p>Eureka Server之间将会通过复制的方式完成数据的同步。（详见Eureka高可用章节） </p></li><li><p>Eureka还提供了客户端缓存的机制，即使所有的Eureka Server都挂掉，客户端依然可以利用缓存中的信息 </p><p>消费其他服务的API。 </p></li><li><p>综上，Eureka通过心跳检测、健康检查、客户端缓存等机制，确保了系统的高可用性、灵活性和可伸缩性。 </p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springcloud </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
